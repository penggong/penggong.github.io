---
layout:     post
title:      "时间复杂度小记"
subtitle:   ""
date:       2018-03-22 15:08
author:     "parkin"
header-img: "img/post-bg-js-module"
catalog: ture
tags:
    - 算法
---
# 时间复杂度小记

------


# 一、时间复杂度定义

固定的一个时间单位，那么有多少个基本操作就代表会花费多少时间单位。显然对于不同的机器环境而言，确切的单位时间是不同的，但是对于算法进行多少个基本操作（即花费多少时间单位）在规模数量级上却是相同的，由此可以忽略机器环境的影响而客观的反应算法的时间效率。

# 二、 大O记法

对于单调的整数函数f，如果存在一个整数函数g和实常数c>0，使得对于充分大的n总有f(n)<=c*g(n)，就说函数g是f的一个渐近函数（忽略常数），记为f(n)=O(g(n))。也就是说，在趋向无穷的极限意义下，函数f的增长速度受到函数g的约束，亦即函数f与函数g的特征相似。

渐近记号（Asymptotic Notation）通常有 O、 Θ 和 Ω 记号法。Θ 记号渐进地给出了一个函数的上界和下界，当只有渐近上界时使用 O 记号，当只有渐近下界时使用 Ω 记号。尽管技术上 Θ 记号较为准确，但通常仍然使用 O 记号表示

例如：
```
	* T(n) = O(n3) 等同于 T(n) ∈ O(n3)
	* T(n) = Θ(n3) 等同于 T(n) ∈ Θ(n3).
```

相当于:
```
	* T(n) 的渐近增长不快于 n3。
	* T(n) 的渐近增长与 n3 一样快。
```


在算法导论中，采用记号 lg n = log2 n ，也就是以 2 为底的对数。改变一个对数的底只是把对数的值改变了一个常数倍，所以当不在意这些常数因子时，我们将经常采用 "lg n"记号，就像使用 O 记号一样。计算机工作者常常认为对数的底取 2 最自然，因为很多算法和数据结构都涉及到对问题进行二分。





